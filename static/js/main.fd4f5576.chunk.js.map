{"version":3,"sources":["Component/BigBox/BigBox.module.css","Component/ToggleButton/ToggleButton.js","Component/BigBox/BigBox.js","Container/Container.js","App.js","serviceWorker.js","index.js","Component/ToggleButton/ToggleButton.module.css","Container/Container.module.css"],"names":["module","exports","ToggleButton","className","classes","Dashboard","this","props","DarkMode","smdashboard","SMDashboard","tfdashboard","TFDashboard","btnAndText","btntext","btnText","onChange","change","btn","switch","type","slider","round","join","Component","BigBox","Bigbox","bigbox","Boxband","boxband","style","backgroundColor","boxbandColor","Icon","icon","Icondescription","icondescription","Year","year","Followers","followers","Iconarrow","iconarrow","Arrowdescription","arrowdescription","Container","state","Handler","setState","body","BigBoxes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd4f5576.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigbox\":\"BigBox_bigbox__3FmDE\",\"Bigbox\":\"BigBox_Bigbox__Sbiug\",\"boxband\":\"BigBox_boxband__2PVro\",\"Boxband\":\"BigBox_Boxband__1t6KO\",\"icon\":\"BigBox_icon__2Tw-B\",\"Icon\":\"BigBox_Icon__zyZFH\",\"icondescription\":\"BigBox_icondescription__1RciL\",\"Icondescription\":\"BigBox_Icondescription__2_FfW\",\"year\":\"BigBox_year__1eA7V\",\"Year\":\"BigBox_Year__hsYp-\",\"followers\":\"BigBox_followers__2KnA0\",\"Followers\":\"BigBox_Followers__2UwOc\",\"iconarrow\":\"BigBox_iconarrow__Y-SIE\",\"Iconarrow\":\"BigBox_Iconarrow__3Qa_U\",\"arrowdescription\":\"BigBox_arrowdescription__31wkw\",\"Arrowdescription\":\"BigBox_Arrowdescription__bJGBb\"};","import React, { Component } from \"react\";\r\nimport classes from \"./ToggleButton.module.css\";\r\n\r\nclass ToggleButton extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className={classes.Dashboard}>\r\n          <div\r\n            className={\r\n              this.props.DarkMode ? classes.smdashboard : classes.SMDashboard\r\n            }\r\n          >\r\n            Social Media Dashboard\r\n          </div>\r\n          <div\r\n            className={\r\n              this.props.DarkMode ? classes.tfdashboard : classes.TFDashboard\r\n            }\r\n          >\r\n            Total Followers: 23,004\r\n          </div>\r\n        </div>\r\n        <div className={classes.btnAndText}>\r\n          <p\r\n            className={this.props.DarkMode ? classes.btntext : classes.btnText}\r\n          >\r\n            Dark Mode\r\n          </p>\r\n          <div onChange={this.props.change} className={classes.btn}>\r\n            <label className={classes.switch}>\r\n              <input type=\"checkbox\" />\r\n              <span\r\n                className={[classes.slider, classes.round].join(\" \")}\r\n              ></span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToggleButton;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./BigBox.module.css\";\r\nimport { GrFacebook } from \"react-icons/gr\";\r\nimport { TiArrowSortedUp } from \"react-icons/ti\";\r\n\r\nclass BigBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className={this.props.DarkMode ? classes.Bigbox : classes.bigbox}>\r\n        <div\r\n          className={this.props.DarkMode ? classes.Boxband : classes.boxband}\r\n          style={{ backgroundColor: this.props.boxbandColor }}\r\n        ></div>\r\n        <span className={this.props.DarkMode ? classes.Icon : classes.icon}>\r\n          {this.props.icon}\r\n        </span>\r\n        <div\r\n          className={\r\n            this.props.DarkMode\r\n              ? classes.Icondescription\r\n              : classes.icondescription\r\n          }\r\n        >\r\n          @nathanf\r\n        </div>\r\n        <div className={this.props.DarkMode ? classes.Year : classes.year}>\r\n          {this.props.year}\r\n        </div>\r\n        <div\r\n          className={\r\n            this.props.DarkMode ? classes.Followers : classes.followers\r\n          }\r\n        >\r\n          FOLLOWERS\r\n        </div>\r\n        <div>\r\n          <TiArrowSortedUp\r\n            className={\r\n              this.props.DarkMode ? classes.Iconarrow : classes.iconarrow\r\n            }\r\n          />\r\n          <div\r\n            className={\r\n              this.props.DarkMode\r\n                ? classes.Arrowdescription\r\n                : classes.arrowdescription\r\n            }\r\n          >\r\n            {this.props.arrowdescription} Today\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BigBox;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Container.module.css\";\r\nimport ToggleButton from \"../Component/ToggleButton/ToggleButton\";\r\nimport BigBox from \"../Component/BigBox/BigBox\";\r\nimport { GrFacebook } from \"react-icons/gr\";\r\nimport { FaTwitter } from \"react-icons/fa\";\r\nimport { AiOutlineInstagram, AiFillYoutube } from \"react-icons/ai\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    DarkMode: false,\r\n  };\r\n\r\n  Handler = () => {\r\n    this.setState({\r\n      DarkMode: !this.state.DarkMode,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.DarkMode ? classes.body : null}>\r\n        <ToggleButton change={this.Handler} DarkMode={this.state.DarkMode} />\r\n        <div className={classes.BigBoxes}>\r\n          <BigBox\r\n            DarkMode={this.state.DarkMode}\r\n            year={\"1987\"}\r\n            arrowdescription={\"12\"}\r\n            icon={<GrFacebook />}\r\n            boxbandColor={\"blue\"}\r\n          />\r\n          <BigBox\r\n            DarkMode={this.state.DarkMode}\r\n            year={\"1044\"}\r\n            arrowdescription={\"99\"}\r\n            icon={<FaTwitter />}\r\n            boxbandColor={\"blue\"}\r\n          />\r\n          <BigBox\r\n            DarkMode={this.state.DarkMode}\r\n            year={\"11k\"}\r\n            arrowdescription={\"1099\"}\r\n            icon={<AiOutlineInstagram />}\r\n            boxbandColor={\"green\"}\r\n          />\r\n          <BigBox\r\n            DarkMode={this.state.DarkMode}\r\n            year={\"8239\"}\r\n            arrowdescription={\"144\"}\r\n            icon={<AiFillYoutube />}\r\n            boxbandColor={\"red\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport Container from \"./Container/Container\";\n\nfunction App() {\n  return (\n    <div>\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnText\":\"ToggleButton_btnText__1LgB1\",\"btntext\":\"ToggleButton_btntext__xJfq3\",\"btn\":\"ToggleButton_btn__1S8pe\",\"btnAndText\":\"ToggleButton_btnAndText__2kOz5\",\"Dashboard\":\"ToggleButton_Dashboard__3nshx\",\"SMDashboard\":\"ToggleButton_SMDashboard__1BTFI\",\"smdashboard\":\"ToggleButton_smdashboard__2RI1s\",\"TFDashboard\":\"ToggleButton_TFDashboard__3OSqZ\",\"tfdashboard\":\"ToggleButton_tfdashboard__1CWOh\",\"switch\":\"ToggleButton_switch__3gtS-\",\"slider\":\"ToggleButton_slider__3hpPP\",\"round\":\"ToggleButton_round__3OlWb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Container_body__V2XVM\",\"BigBoxes\":\"Container_BigBoxes__2WAzq\"};"],"sourceRoot":""}